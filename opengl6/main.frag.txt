#version 130

uniform int time;
uniform sampler2D Sam;
uniform int mode;
uniform vec3 light;
uniform vec3 viewer;
uniform mat4 viewMatrix;

in vec2 pass_Tex;
in vec4 pass_Color;
in vec3 pass_Norm;
in vec3 pass_Pos;

out vec4 out_Color;


void main(void)
{
vec4 temp_out;
//out_Color=vec4(pass_Color,1);
if(mode==0){
vec3 temp=vec3(sin(time/50.0),-sin(time/50.0),cos(time/50.0));
temp_out=vec4(mix(pass_Color.rgb,temp,pass_Color.a),1);
}
if(mode==1){
temp_out=vec4(texture(Sam,pass_Tex).rgb,1);
}

//(.25+clamp(.75*max(dot(pass_Norm.xyz,normalize(pass_Pos.xyz-sunPos)),0.0),0.0,2.0));

//float dif=(.25+clamp(4.5*max(dot(normalize(pass_Norm),normalize(light-pass_Pos)),0.0),0.0,1.5));

float dif=max(dot(normalize(pass_Norm),normalize(-light-pass_Pos)),0.1);

float spec;
vec3 specRay=reflect(-light-pass_Pos,normalize(pass_Norm));

//http://www.opengl.org/sdk/docs/tutorials/ClockworkCoders/lighting.php
//http://en.wikibooks.org/wiki/GLSL_Programming/GLUT/Specular_Highlights

spec=max(dot(normalize(specRay),normalize(pass_Pos+viewer)),0.1);
spec=spec*spec*spec;


out_Color=vec4(temp_out.rgb*(dif)+spec,temp_out.a);
}
